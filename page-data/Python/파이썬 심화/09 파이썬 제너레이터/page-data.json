{"componentChunkName":"component---src-templates-docs-js","path":"/Python/파이썬 심화/09 파이썬 제너레이터","result":{"data":{"site":{"siteMetadata":{"title":"Seoyul Blog | ResourceSaga","docsLocation":"https://github.com/resourceSaga/ResourceSaga.github.io"}},"mdx":{"fields":{"id":"bf45e06d-46a7-56b4-ad05-1da4a5a8941f","title":"09 파이썬 제너레이터","slug":"/Python/파이썬 심화/09 파이썬 제너레이터"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"9 \\uD30C\\uC774\\uC36C \\uC81C\\uB108\\uB808\\uC774\\uD130\"), mdx(\"h2\", null, \"\\uBC18\\uBCF5 \\uAC00\\uB2A5\\uD55C \\uAC1D\\uCCB4 (iterable object)\"), mdx(\"p\", null, \"\\uBC18\\uBCF5\\uD615 \\uAC1D\\uCCB4(for, collections, text file, List, Dict, Set, Tuple, unpacking, *args)\"), mdx(\"p\", null, \"\\uBC18\\uBCF5\\uD615 \\uAC1D\\uCCB4\\uB294 \\uB0B4\\uBD80\\uC801\\uC73C\\uB85C iter(x) \\uD568\\uC218\\uB97C \\uD638\\uCD9C\\uD55C\\uB2E4. yield from \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"t = 'ABCDEF'\\n# while \\uC0AC\\uC6A9\\nw = iter(t)\\n\\nwhile True:\\n    try:\\n        print(next(w))\\n    except StopIteration: # next() \\uAC00 \\uB354 \\uC774\\uC0C1 \\uC5C6\\uC74C\\n        break\\n\\n# \\uBC18\\uBCF5\\uD615 \\uD655\\uC778\\nprint(hasattr(t, '__iter__'))       # True\\nprint(isinstance(t, abc.Iterable))  # True\\n\\n\")), mdx(\"h2\", null, \"next() \\uB97C \\uC0AC\\uC6A9\\uD558\\uB294 \\uC21C\\uD68C \\uAC1D\\uCCB4\"), mdx(\"p\", null, \"\\uD074\\uB798\\uC2A4\\uC5D0 \\uB9E4\\uC9C1 \\uBA54\\uC18C\\uB4DC \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"__next__\"), \" \\uC640 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"__iter__\"), \" \\uAC00 \\uAD6C\\uD604\\uB418\\uC5B4\\uC788\\uAE30 \\uB54C\\uBB38\\uC5D0 \\uC774\\uD130\\uB7EC\\uBE14\\uD55C \\uAC1D\\uCCB4\\uAC00 \\uB41C\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"class WordSplitIter:\\n    def __init__(self, text):\\n        self._idx = 0\\n        self._text = text.split(' ')\\n    \\n    def __next__(self):\\n        # print('Called __next__')\\n        try:\\n            word = self._text[self._idx]\\n        except IndexError:                      # \\uB354\\uC774\\uC0C1 \\uB2E4\\uC74C\\uC774\\uC5C6\\uC5B4\\n            raise StopIteration('Stop!')        # \\uC5D0\\uB7EC\\uAC00 \\uBC1C\\uC0DD.   \\n        self._idx += 1\\n        return word\\n    \\n    def __iter__(self):\\n        print('Called __iter__')\\n        return self\\n    \\n    def __repr__(self):\\n        return 'WordSplit(%s)' % (self._text)\\n\\nwi = WordSplitIter('Who says the nights are for sleeping')\\n\\nprint(wi)       # WordSplit(['Who', 'says', 'the', 'nights', 'are', 'for', 'sleeping'])\\nprint(next(wi)) # Who\\nprint(next(wi)) # says\\n\")), mdx(\"h2\", null, \"\\uC21C\\uD68C \\uAC1D\\uCCB4\\uC758 Generator \\uD328\\uD134 \\uC0AC\\uC6A9\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"yield\"), \" \\uB97C \\uD1B5\\uD574 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"__next__\"), \" \\uC758 \\uAE30\\uB2A5\\uC744 \\uB300\\uCCB4\\uD55C\\uB2E4.\"), mdx(\"p\", null, \"\\uC9C0\\uB2A5\\uD615 \\uB9AC\\uC2A4\\uD2B8, \\uB515\\uC154\\uB108\\uB9AC, \\uC9D1\\uD569 -> \\uB370\\uC774\\uD130 \\uC14B\\uC774 \\uC99D\\uAC00 \\uB420 \\uACBD\\uC6B0 \\uBA54\\uBAA8\\uB9AC \\uC0AC\\uC6A9\\uB7C9 \\uC99D\\uAC00 -> \\uC81C\\uB124\\uB808\\uC774\\uD130 \\uC644\\uD654\"), mdx(\"p\", null, \"\\uB2E8\\uC704 \\uC2E4\\uD589 \\uAC00\\uB2A5\\uD55C \\uCF54\\uB8E8\\uD2F4(Coroutine) \\uAD6C\\uD604\\uC5D0 \\uC544\\uC8FC \\uC911\\uC694\"), mdx(\"p\", null, \"\\uB515\\uC154\\uB108\\uB9AC, \\uB9AC\\uC2A4\\uD2B8 \\uD55C \\uBC88 \\uD638\\uCD9C \\uD560 \\uB54C \\uB9C8\\uB2E4 \\uD558\\uB098\\uC758 \\uAC12\\uB9CC \\uB9AC\\uD134 -> \\uC544\\uC8FC \\uC791\\uC740 \\uBA54\\uBAA8\\uB9AC \\uC591\\uC744 \\uD544\\uC694\\uB85C \\uD568\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"class WordSplitGenerator:\\n    def __init__(self, text):\\n        self._text = text.split(' ')\\n    \\n    def __iter__(self):\\n        for word in self._text:\\n           yield word # \\uC81C\\uB124\\uB808\\uC774\\uD130      __next__ \\uD568\\uC218\\uC5D0\\uC11C \\uD558\\uB294 \\uC5ED\\uD560\\uC744 \\uB2E4 \\uD574\\uC90C\\n        return\\n    \\n    def __repr__(self):\\n        return 'WordSplit(%s)' % (self._text)\\n\\nwg = WordSplitGenerator('Who says the nights are for sleeping')\\nwt = iter(wg)\\n\\nprint(wt)        \\n# <generator object WordSplitGenerator.__iter__ at 0x000001CF7B81B848>\\n\\nprint(next(wt)) # who\\nprint(next(wt)) # says\\n# sleeping \\uAE4C\\uC9C0 next(wt) \\uAC00\\uB2A5\\n\")), mdx(\"h2\", null, \"\\uC81C\\uB108\\uB808\\uC774\\uD130\\uB97C \\uC774\\uD574\\uB97C \\uC704\\uD55C \\uC608\\uC81C\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"# for\\uBB38\\uC740 IndexError \\uC744 \\uCCB4\\uD06C\\uD574\\uC11C \\uBA48\\uCD94\\uAE30 \\uB54C\\uBB38\\uC5D0 \\uC790\\uB3D9\\uC73C\\uB85C StopIteration \\uC5D0\\uB7EC\\uBC1C\\uC0DD\\uC744 \\uC7A1\\uC544\\uC900\\uB2E4.\\ndef generator_ex1():\\n    print('start')\\n    yield 'AAA'\\n    print('continue')\\n    yield 'BBB'\\n    print('end')\\n\\ntemp = iter(generator_ex1())\\nfor v in generator_ex1():\\n        print(v)\\n# start\\n# AAA\\n# continue\\n# BBB\\n# end\\n\")), mdx(\"h2\", null, \"\\uC81C\\uB108\\uB808\\uC774\\uD130\\uC5D0\\uC11C \\uC9C0\\uC6D0\\uD558\\uB294 \\uD568\\uC218\\uB97C \\uC774\\uC6A9\\uD55C \\uC608\\uC81C\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"import itertools\\n# 1 \\uBD80\\uD130 2.5 \\uC529 \\uC99D\\uAC00\\uD558\\uB294 \\uBB34\\uD55C\\uC758 \\uC218\\ngen1 = itertools.count(1, 2.5)\\n\\nprint(next(gen1))   # 1\\nprint(next(gen1))   # 3.5\\nprint(next(gen1))   # 6.0\\nprint(next(gen1))   # 8.5\\n# ... \\uBB34\\uD55C\\n\\n#############################\\n\\n# \\uC885\\uB8CC\\uAC12 \\uC870\\uAC74 \\uAE4C\\uC9C0, \\uD568\\uC218\\uC2DD \\uBC18\\uBCF5\\ngen2 = itertools.takewhile(lambda n : n < 1000, itertools.count(1, 2.5))\\n\\nfor v in gen2:\\n    print(v)  # v \\uAC00 1000 \\uBBF8\\uB9CC\\uC758 \\uCD5C\\uB300\\uAC12 \\uAE4C\\uC9C0 \\uD568\\uC218\\uC2DD next \\uAC00\\uB2A5\\n\\n#############################\\n\\n# \\uD544\\uD130 \\uBC18\\uB300\\ngen3 = itertools.filterfalse(lambda n : n < 3, [1,2,3,4,5])\\n\\nfor v in gen3:\\n    print(v) # \\uC870\\uAC74\\uC758 \\uB9DE\\uC9C0 \\uC54A\\uB294 \\uBC18\\uB300\\uACB0\\uACFC\\uAC00 next \\uB428\\n                        # \\uC5EC\\uAE30 \\uC608\\uC81C\\uC5D0\\uC11C 3, 4, 5\\n\\n############################\\n\\n# \\uB204\\uC801 \\uD569\\uACC4\\ngen4 = itertools.accumulate([x for x in range(1, 101)])\\n\\nfor v in gen4:\\n    print(v)    # \\uB9C8\\uCE58 reduce(\\uD568\\uC218, iter_obj) \\uCC98\\uB7FC \\uB204\\uC801 \\uACC4\\uC0B0\\n\\n############################\\n\\n# \\uBC18\\uBCF5 \\uAC00\\uB2A5\\uD55C \\uAC1D\\uCCB4\\uC758 \\uC694\\uC18C\\uB97C \\uD569\\uCCD0\\uC11C \\uD558\\uB098\\uB85C \\uB9CC\\uB4E6\\ngen5 = itertools.chain('ABCDE', range(1,11,2))\\n\\nprint(list(gen5))      # ['A', 'B', 'C', 'D', 'E', 1, 3, 5, 7, 9]\\n\\ngen6 = itertools.chain(enumerate('ABCDE'))\\n\\nprint(list(gen6))      # [(0, 'A'), (1, 'B'), (2, 'C'), (3, 'D'), (4, 'E')]\\n\\n############################\\n\\n# \\uAC1C\\uBCC4\\uC801\\uC73C\\uB85C \\uBC18\\uBCF5 \\uAC00\\uB2A5\\uD55C \\uAC1D\\uCCB4\\uB97C \\ngen7 = itertools.product('ABCDE')\\n\\nprint(list(gen7))  # [('A',), ('B',), ('C',), ('D',), ('E',)]\\n\\n# \\uC5F0\\uC0B0(\\uACBD\\uC6B0\\uC758 \\uC218)\\ngen8 = itertools.product('ABCDE', repeat=2)\\n\\nprint(list(gen8))  \\n# [('A', 'A'), ('A', 'B'), ('A', 'C'), ... , ('E', 'C'), ('E', 'D'), ('E', 'E')]\\n\\n############################\\n\\n# \\uADF8\\uB8F9\\uD654\\ngen9 = itertools.groupby('AAABBCCCCDDEEE')\\n\\n# print(list(gen9))\\n# [('A', <itertools._grouper>), ... , ('E', <itertools._grouper>)]\\n\\nfor chr, group in gen9:\\n    print('chr, ' : ', list(group))\\n\\n# A  :  ['A', 'A', 'A']\\n# B  :  ['B', 'B']\\n# C  :  ['C', 'C', 'C', 'C']\\n# D  :  ['D', 'D']\\n# E  :  ['E', 'E', 'E']\\n\\n# \\uC694\\uC18C\\uC758 \\uACBD\\uC6B0\\uC758\\uC218\\ngen10 = itertools.permutations('ABC',3)\\n\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#9-파이썬-제너레이터","title":"9 파이썬 제너레이터","items":[{"url":"#반복-가능한-객체-iterable-object","title":"반복 가능한 객체 (iterable object)"},{"url":"#next-를-사용하는-순회-객체","title":"next() 를 사용하는 순회 객체"},{"url":"#순회-객체의-generator-패턴-사용","title":"순회 객체의 Generator 패턴 사용"},{"url":"#제너레이터를-이해를-위한-예제","title":"제너레이터를 이해를 위한 예제"},{"url":"#제너레이터에서-지원하는-함수를-이용한-예제","title":"제너레이터에서 지원하는 함수를 이용한 예제"}]}]},"parent":{"__typename":"File","relativePath":"Python/파이썬 심화/09 파이썬 제너레이터.md"},"frontmatter":{"metaTitle":null,"metaDescription":null}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/KBI-Financial-DT-Test","title":"KBI 금융 DT 테스트"}}},{"node":{"fields":{"slug":"/Nodejs","title":"Nodejs"}}},{"node":{"fields":{"slug":"/","title":"Welcome Page"}}},{"node":{"fields":{"slug":"/resourcesaga","title":"Self Introduction"}}},{"node":{"fields":{"slug":"/KBI-Financial-DT-Test/1udtf","title":"디지털 전환의 이해"}}},{"node":{"fields":{"slug":"/KBI-Financial-DT-Test/2dft","title":"디지털 금융 트렌드"}}},{"node":{"fields":{"slug":"/KBI-Financial-DT-Test/3dft","title":"디지털 금융 기술"}}},{"node":{"fields":{"slug":"/KBI-Financial-DT-Test/4dfm","title":"디지털 금융 마케팅"}}},{"node":{"fields":{"slug":"/Nodejs/Nodejs-intro","title":"Nodejs 개요"}}},{"node":{"fields":{"slug":"/Python/파이썬 심화/01 class 의 재사용","title":"01 Class 의 재사용"}}},{"node":{"fields":{"slug":"/Python/파이썬 심화/02 Class 데코레이터","title":"02 Class 데코레이터"}}},{"node":{"fields":{"slug":"/Python/파이썬 심화/03 파이썬 데이터 모델 - 네임드튜플","title":"03 파이썬 데이터 모델 네임드튜플"}}},{"node":{"fields":{"slug":"/Python/파이썬 심화/04 파이썬 스페셜 메소드","title":"04 파이썬 스페셜 메소드"}}},{"node":{"fields":{"slug":"/Python/파이썬 심화/05 시퀀스 자료형","title":"05 시퀀스 자료형"}}},{"node":{"fields":{"slug":"/Python/파이썬 심화/06-1 함수형 프로그래밍","title":"06 1 함수형 프로그래밍"}}},{"node":{"fields":{"slug":"/Python/파이썬 심화/06-2 Closure와 Decorator","title":"06 2 Closure와 Decorator"}}},{"node":{"fields":{"slug":"/Python/파이썬 심화/07 Reference참조형","title":"07 Reference참조형"}}},{"node":{"fields":{"slug":"/Python/파이썬 심화/08 파이썬 클래스 특별 메소드","title":"08 파이썬 클래스 특별 메소드"}}},{"node":{"fields":{"slug":"/Python/파이썬 심화/09 파이썬 제너레이터","title":"09 파이썬 제너레이터"}}},{"node":{"fields":{"slug":"/Python/파이썬 심화/10 코루틴","title":"10 코루틴"}}},{"node":{"fields":{"slug":"/Python/파이썬 심화/11 Concurrency - Future","title":"11 Concurrency Future"}}},{"node":{"fields":{"slug":"/Python/파이썬 심화/12 비동기 - async","title":"12 비동기 Async"}}},{"node":{"fields":{"slug":"/Python/파이썬 심화/pythonic!","title":"Pythonic"}}},{"node":{"fields":{"slug":"/Python/파이썬 심화","title":"파이썬 심화"}}},{"node":{"fields":{"slug":"/Python","title":"파이썬"}}},{"node":{"fields":{"slug":"/Python/basic","title":"파이썬 기초"}}},{"node":{"fields":{"slug":"/Python/basic/01 개발 환경 설정","title":"01 개발 환경 설정"}}},{"node":{"fields":{"slug":"/Python/basic/02 print 함수","title":"02 Print 함수"}}},{"node":{"fields":{"slug":"/Python/basic/03 파이썬 기반 지식","title":"03 파이썬 기반 지식"}}},{"node":{"fields":{"slug":"/Python/basic/04 가상 환경 설정 및 패키지 설치","title":"04 가상 환경 설정 및 패키지 설치"}}},{"node":{"fields":{"slug":"/Python/basic/05 자료형","title":"05 자료형"}}},{"node":{"fields":{"slug":"/Python/basic/06 함수 및 람다(lambda)","title":"06 함수 및 람다 Lambda"}}},{"node":{"fields":{"slug":"/Python/basic/07 클래스","title":"07 클래스"}}},{"node":{"fields":{"slug":"/Python/basic/08 상속, 다중 상속","title":"08 상속 다중 상속"}}},{"node":{"fields":{"slug":"/Python/basic/09 모듈과 패키지","title":"09 모듈과 패키지"}}},{"node":{"fields":{"slug":"/Python/basic/10 파일 입출력","title":"10 파일 입출력"}}},{"node":{"fields":{"slug":"/Python/basic/11 에러 및 예외 처리","title":"11 에러 및 예외 처리"}}},{"node":{"fields":{"slug":"/Python/basic/12 외부 파일 처리 - csv와 XSL, XLSX","title":"12 외부 파일 처리 Csv와 XSL XLSX"}}},{"node":{"fields":{"slug":"/Python/basic/13 파이썬 SQLite 연동, 테이블 생성 삽입","title":"13 파이썬 SQ Lite 연동 테이블 생성 삽입"}}},{"node":{"fields":{"slug":"/Python/basic/14 테이블 조회, 조건 조회","title":"14 테이블 조회 조건 조회"}}},{"node":{"fields":{"slug":"/Python/basic/15 테이블 수정, 삭제","title":"15 테이블 수정 삭제"}}},{"node":{"fields":{"slug":"/Python/basic/16 타이핑 게임 제작","title":"16 타이핑 게임 제작"}}}]}},"pageContext":{"id":"bf45e06d-46a7-56b4-ad05-1da4a5a8941f"}},"staticQueryHashes":["2619113677","2619113677","3706406642","3706406642","417421954","417421954"]}